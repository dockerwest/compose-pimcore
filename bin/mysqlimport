#!/usr/bin/env python3

import os
import sys
import subprocess
import re
from environment import Environment

currentpath = os.getcwd()
composepath = os.path.abspath(os.path.dirname(sys.argv[0]) + '/../')

env = Environment(composepath + '/.env')

if len(sys.argv) <= 1:
    raise Exception('You must at least give a databasename')

cmd = [
    os.path.dirname(sys.argv[0]) + '/run',
    'ps', '--services', '--filter', 'status=running'
]

p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
try:
    p.wait()
except KeyboardInterrupt:
    try:
        p.terminate()
    except OSError:
        pass
    p.wait()
out, err = p.communicate()
out = out.decode('utf-8')
runningContainers = out.splitlines()

if not 'mysql' in runningContainers:
    raise Exception('We need a running mysql server')

cmd = [
    os.path.dirname(sys.argv[0]) + '/run',
    'ps', '-q', 'mysql'
]

p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
try:
    p.wait()
except KeyboardInterrupt:
    try:
        p.terminate()
    except OSError:
        pass
    p.wait()
out, err = p.communicate()
mysqlcontainer = out.decode('utf-8').strip()

if not mysqlcontainer:
    raise Exception('No proper name found for the running mysql instance')

db = sys.argv[1]
try:
    sqlfile = sys.argv[2]
except IndexError:
    sqlfile = None

if sqlfile is not None:
    cmd = [
        'docker', 'cp',
        currentpath + '/' + sqlfile, mysqlcontainer + ':/' + sqlfile
    ]

    p = subprocess.Popen(cmd)
    try:
        p.wait()
    except KeyboardInterrupt:
        try:
            p.terminate()
        except OSError:
            pass
    p.wait()

    cmd = [
        os.path.dirname(sys.argv[0]) + '/mysql',
        db, '--max_allowed_packet=1024M', '-e', 'SOURCE ' + sqlfile
    ]

    p = subprocess.Popen(cmd)
    try:
        p.wait()
    except KeyboardInterrupt:
        try:
            p.terminate()
        except OSError:
            pass
    p.wait()

    dockerrun = [os.path.dirname(sys.argv[0]) + '/run', 'exec']
    if not sys.stdin.isatty() or not sys.stdout.isatty():
        dockerrun += ['-T']

    cmd = dockerrun + [
        'mysql', 'rm', sqlfile
    ]

    p = subprocess.Popen(cmd)
    try:
        p.wait()
    except KeyboardInterrupt:
        try:
            p.terminate()
        except OSError:
            pass
    p.wait()

    p.communicate()
    sys.exit(p.returncode)
else:
    # lets assume sql is being piped in
    cmd = [
        'docker', 'exec', '-i', mysqlcontainer,
        'mysql', '-uroot', '-p' + env.get('MYSQL_ROOT_PASSWORD'),
        '--max_allowed_packet=1024M', db
    ]
    os.execvp(cmd[0], cmd)
